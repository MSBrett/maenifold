---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout title="Installation - maenifold">
  <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <h1 class="text-4xl font-light mb-8">Installation</h1>

    <!-- Quick Install -->
    <section class="mb-12">
      <h2 class="text-3xl font-light mb-6">Install</h2>
      <div class="bg-gray-900 dark:bg-gray-800 rounded-lg p-6 overflow-x-auto">
        <pre class="font-mono text-sm"><code class="text-gray-300 dark:text-gray-200">npm install -g @ma-collective/maenifold</code></pre>
      </div>
    </section>

    <!-- MCP Interface -->
    <section class="mb-12">
      <h2 class="text-3xl font-light mb-6">MCP Interface</h2>

      <div class="mb-8">
        <h3 class="text-2xl font-light mb-4">Claude Code, Continue, Cline</h3>
        <p class="mb-4 text-gray-700 dark:text-gray-300">Add to MCP config:</p>
        <div class="bg-gray-900 dark:bg-gray-800 rounded-lg p-6 overflow-x-auto">
          <pre class="font-mono text-sm"><code class="text-gray-300 dark:text-gray-200">{`{
  "mcpServers": {
    "maenifold": {
      "command": "maenifold",
      "args": ["--mcp"],
      "env": {"MAENIFOLD_ROOT": "~/maenifold"}
    }
  }
}`}</code></pre>
        </div>
      </div>

      <div class="mb-8">
        <h3 class="text-2xl font-light mb-4">Codex</h3>
        <p class="mb-4 text-gray-700 dark:text-gray-300">Add to <code class="bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded text-sm">~/.codex/config.toml</code>:</p>
        <div class="bg-gray-900 dark:bg-gray-800 rounded-lg p-6 overflow-x-auto">
          <pre class="font-mono text-sm"><code class="text-gray-300 dark:text-gray-200">{`[mcp_servers.maenifold]
type = "stdio"
command = "maenifold"
args = ["--mcp"]
startup_timeout_sec = 120
tool_timeout_sec = 600
env = { MAENIFOLD_ROOT = "~/maenifold" }`}</code></pre>
        </div>
      </div>

      <div class="p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded">
        <p class="font-semibold mb-2">Try it:</p>
        <code>"Write a memory about our architecture decisions"</code>
      </div>
    </section>

    <!-- CLI Interface -->
    <section class="mb-12">
      <h2 class="text-3xl font-light mb-6">CLI Interface</h2>
      <p class="mb-6 text-gray-700 dark:text-gray-300">Use maenifold directly in scripts, pipelines, or with non-MCP clients:</p>

      <div class="space-y-6">
        <div>
          <h4 class="font-semibold mb-3">Write a memory with WikiLinks</h4>
          <div class="bg-gray-900 dark:bg-gray-800 rounded-lg p-6 overflow-x-auto">
            <pre class="font-mono text-sm"><code class="text-gray-300 dark:text-gray-200">{`maenifold --tool WriteMemory --payload '{
  "title": "Architecture Decisions",
  "content": "Our [[microservices]] use [[event-sourcing]] for [[audit-trails]]"
}'`}</code></pre>
          </div>
        </div>

        <div>
          <h4 class="font-semibold mb-3">Continue a sequential thinking session</h4>
          <div class="bg-gray-900 dark:bg-gray-800 rounded-lg p-6 overflow-x-auto">
            <pre class="font-mono text-sm"><code class="text-gray-300 dark:text-gray-200">{`maenifold --tool SequentialThinking --payload '{
  "sessionId": "session-1234567890",
  "response": "After analyzing the architecture...",
  "nextThoughtNeeded": true
}'`}</code></pre>
          </div>
        </div>

        <div>
          <h4 class="font-semibold mb-3">Search memories with hybrid mode</h4>
          <div class="bg-gray-900 dark:bg-gray-800 rounded-lg p-6 overflow-x-auto">
            <pre class="font-mono text-sm"><code class="text-gray-300 dark:text-gray-200">{`maenifold --tool SearchMemories --payload '{
  "query": "authentication patterns",
  "mode": "Hybrid",
  "pageSize": 10
}'`}</code></pre>
          </div>
        </div>
      </div>

      <div class="mt-8 p-4 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded">
        <p class="font-semibold mb-2">Full Feature Parity</p>
        <p>
          MCP and CLI have full feature parity. Start a session via MCP and continue it via CLI, or vice versa.
          The system supports concurrent agents using the same memory location - perfect for multi-agent pipelines
          or parallel workflows.
        </p>
      </div>
    </section>
  </div>
</BaseLayout>
