---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { readdir } from 'fs/promises';
import { join } from 'path';

// Get list of all tool markdown files
const toolsDir = join(process.cwd(), 'src/content/tools');
const toolFiles = await readdir(toolsDir);
const tools = toolFiles
  .filter(file => file.endsWith('.md'))
  .map(file => {
    const name = file.replace('.md', '');
    return {
      name,
      slug: name.toLowerCase(),
      displayName: name.split(/(?=[A-Z])/).join(' ').replace(/^\w/, c => c.toUpperCase())
    };
  })
  .sort((a, b) => a.displayName.localeCompare(b.displayName));
---

<BaseLayout title="Tools - maenifold">
  <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <h1 class="text-4xl font-light mb-4">Tools</h1>
    <p class="text-xl mb-8 text-gray-600 dark:text-gray-400">
      Complete reference for all {tools.length} maenifold tools
    </p>

    <!-- Search Box -->
    <div class="mb-8">
      <input
        type="text"
        id="tool-search"
        placeholder="Search tools..."
        class="w-full px-4 py-3 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-primary"
      />
    </div>

    <!-- Tools Grid -->
    <div id="tools-grid" class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
      {tools.map(tool => (
        <a
          href={`/tools/${tool.slug}`}
          class="tool-card p-6 border border-gray-200 dark:border-gray-700 rounded-lg hover:border-primary dark:hover:border-primary-light transition-colors"
          data-name={tool.displayName.toLowerCase()}
        >
          <h3 class="text-xl font-semibold mb-2 text-primary dark:text-primary-light">
            {tool.displayName}
          </h3>
          <p class="text-gray-600 dark:text-gray-400 text-sm">
            View documentation â†’
          </p>
        </a>
      ))}
    </div>

    <div id="no-results" class="hidden text-center py-12 text-gray-500">
      No tools found matching your search.
    </div>
  </div>

  <script>
    // Simple client-side search
    const searchInput = document.getElementById('tool-search') as HTMLInputElement;
    const toolCards = document.querySelectorAll('.tool-card') as NodeListOf<HTMLElement>;
    const noResults = document.getElementById('no-results') as HTMLElement;

    searchInput?.addEventListener('input', (e) => {
      const query = (e.target as HTMLInputElement).value.toLowerCase();
      let visibleCount = 0;

      toolCards.forEach(card => {
        const name = card.dataset.name || '';
        if (name.includes(query)) {
          card.classList.remove('hidden');
          visibleCount++;
        } else {
          card.classList.add('hidden');
        }
      });

      if (visibleCount === 0) {
        noResults?.classList.remove('hidden');
      } else {
        noResults?.classList.add('hidden');
      }
    });
  </script>
</BaseLayout>
