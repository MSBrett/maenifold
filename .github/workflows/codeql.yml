Here's an updated workflow that adds your explicit Restore and Build step and removes the autobuild step. The explicit build runs after the CodeQL initialization (init) and before analyze — that's the recommended ordering for compiled languages like C#.

Updated workflow:

```yaml
name: CodeQL

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  schedule:
    - cron: '0 6 * * 1'

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp', 'javascript' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: '9.0.x'

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql/codeql-config.yml

      - name: Restore and Build (explicit)
        run: |
          dotnet restore Maenifold.sln
          dotnet build Maenifold.sln -c Release --no-restore

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        id: analyze
        continue-on-error: true
        with:
          category: '/language:${{matrix.language}}'

      - name: CodeQL Analysis Status
        if: steps.analyze.outcome == 'failure'
        run: |
          echo "::warning::CodeQL analysis completed but SARIF upload failed."
          echo "::warning::This typically means repository-level code scanning is not enabled."
          echo "::warning::To fix this: Go to Settings → Security → Code security and analysis → Enable Code scanning."
          echo "::warning::Enable GitHub Advanced Security (Code scanning) to enforce this check."
          echo "::notice::The security analysis was performed successfully, only the upload to GitHub failed."
```

Notes:
- Ensure the solution filename Maenifold.sln is correct (typo might cause build to fail).
- We removed the autobuild step because you are providing an explicit build. If you prefer, you can keep autobuild instead of the explicit steps — but for .NET it's often more reliable to run dotnet restore/dotnet build explicitly after init.