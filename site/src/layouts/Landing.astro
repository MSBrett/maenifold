---
import Base from './Base.astro';
---

<Base>
  <style>
    .hero { position: relative; padding: 48px 0 24px; }
    .grid { display:grid; grid-template-columns: 1.1fr .9fr; gap: 28px; align-items:center; }
    .eyebrow { color: var(--muted); letter-spacing: 1px; text-transform: uppercase; font-size: 12px; }
    .title { font-size: clamp(36px, 4.5vw, 64px); font-weight: 800; letter-spacing: .4px; margin: 10px 0 8px; }
    .subtitle { color: var(--muted); font-size: clamp(16px, 2.2vw, 20px); max-width: 48ch; }
    .cta { margin-top: 16px; display:flex; gap: 12px; }
    .cta a { padding: 10px 14px; border-radius: 12px; background: rgba(84,174,255,0.12); border:1px solid rgba(84,174,255,0.25); }
    .card { padding: 16px; border-radius: 14px; border: 1px solid rgba(255,255,255,0.06); background: rgba(255,255,255,0.04); }
    .scene { height: 480px; border-radius: 16px; overflow: hidden; border:1px solid rgba(255,255,255,0.06); background: radial-gradient(1200px 600px at 20% 10%, rgba(84,174,255,0.08), transparent); }
  </style>

  <section class="hero container">
    <div class="grid">
      <div>
        <div class="eyebrow">Persistent Graph-of-Thoughts</div>
        <h1 class="title">Your AI is ephemeral. Your knowledge shouldn't be.</h1>
        <p class="subtitle">maenifold transforms isolated AI sessions into a persistent knowledge graph with WikiLinks, vectors, and emergent structure. Test-time reasoning that compounds.</p>
        <div class="cta">
          <a href="#wow">Explore the graph</a>
          <a href={`${import.meta.env.BASE_URL}usage/`}>Usage & Docs</a>
        </div>
      </div>
      <div class="scene">
        <div id="graph" style="width:100%; height:100%"></div>
        <script type="module">
          const [{ default: ForceGraph3D }, THREE] = await Promise.all([
            import('3d-force-graph'),
            import('three')
          ]);

          const el = document.getElementById('graph');
          const N = 90;
          const gData = {
            nodes: [...Array(N).keys()].map(i => ({ id: i, group: (i % 4) + 1 })),
            links: [...Array(N).keys()].filter(id => id).map(id => ({ source: id, target: Math.round(Math.random()* (id-1)) }))
          };

          const Graph = ForceGraph3D()(el)
            .backgroundColor('#0b1520')
            .nodeLabel(n => String(n.id))
            .nodeThreeObject(node => new THREE.Mesh(
              new THREE.SphereGeometry(4.2, 16, 16),
              new THREE.MeshStandardMaterial({ color: '#54aeff', roughness: 0.6, metalness: 0.05, emissive: 0x0b0b0b })
            ))
            .linkColor(() => 'rgba(255,255,255,0.12)')
            .linkOpacity(0.85)
            .linkWidth(0.6)
            .linkDirectionalParticles(2)
            .linkDirectionalParticleSpeed(0.006)
            .linkDirectionalParticleWidth(0.8)
            .d3VelocityDecay(0.25)
            .graphData(gData);

          const renderer = Graph.renderer();
          renderer.setPixelRatio(Math.min(window.devicePixelRatio || 1, 2));
          renderer.outputEncoding = THREE.sRGBEncoding;
          renderer.setSize(el.clientWidth, el.clientHeight, false);

          Graph.scene().fog = new THREE.FogExp2(0x0b1520, 0.0008);
          Graph.scene().add(new THREE.AmbientLight(0xffffff, 0.35));
          const dirLight = new THREE.DirectionalLight(0x88ccff, 0.6);
          dirLight.position.set(1, 2, 1);
          Graph.scene().add(dirLight);

          const controls = Graph.controls();
          controls.autoRotate = true;
          controls.autoRotateSpeed = 0.6;
          controls.enableDamping = true;
          controls.dampingFactor = 0.08;

          const cam = Graph.camera();
          cam.position.set(260, 80, 0);
          controls.update();

          window.addEventListener('resize', () => {
            const w = el.clientWidth, h = el.clientHeight;
            renderer.setSize(w, h, false);
            const c = Graph.camera();
            if (c && typeof c.aspect !== 'undefined') {
              c.aspect = w / h;
              c.updateProjectionMatrix();
            }
          }, { passive: true });

          const base = import.meta.env.BASE_URL || '/';
          fetch(`${base}graph-data.json`).then(r => r.ok ? r.json() : null).then(data => {
            if (data && data.nodes?.length) {
              Graph
                .nodeThreeObject(node => new THREE.Mesh(
                  new THREE.SphereGeometry(3.6, 16, 16),
                  new THREE.MeshStandardMaterial({ color: '#54aeff', roughness: 0.6, metalness: 0.05, emissive: 0x0b0b0b })
                ))
                .graphData(data)
                .onNodeClick(node => {
                  const slug = String(node.id || '')
                    .toLowerCase()
                    .replace(/\s+/g, '')
                    .replace(/[^a-z0-9-]/g, '');
                  if (!slug) return;
                  window.location.href = `${base}usage/tools/${slug}/`;
                });
            }
          }).catch(() => {});
        </script>
      </div>
    </div>
  </section>

  <section class="container" id="wow">
    <div class="card">
      <slot />
    </div>
  </section>
</Base>
